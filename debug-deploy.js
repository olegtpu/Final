import hre from "hardhat"; // –ò–º–ø–æ—Ä—Ç Hardhat (hre)
import * as fs from 'fs';
import * as path from 'path';
import { fileURLToPath } from 'url'; // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è __dirname –≤ ESM

const PRIVATE_KEY = 'ac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80'; 

// --- –õ–æ–≥–∏–∫–∞ –¥–ª—è __dirname –≤ ES Modules ---
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
// ----------------------------------------

async function debugDeploy() {
  console.log('Hardhat Debug Deployment (ESM)');
  console.log('==================================');
  
  try {
   
    console.log('üì° Connecting to provider...');

    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Signer (–ü–æ–¥–ø–∏—Å–∞–Ω—Ç) –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    const provider = hre.ethers.provider;
    const wallet = new hre.ethers.Wallet('0x' + PRIVATE_KEY, provider);
    const deployerAddress = await wallet.getAddress();
    
    console.log(`‚úÖ Connected with account: ${deployerAddress}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ 
    const balance = await provider.getBalance(deployerAddress);
    console.log(`üí∞ Balance: ${hre.ethers.formatEther(balance)} ETH`);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ Contract Factories (Hardhat –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç ABI/Bytecode)
    console.log('‚úÖ Contract factories loaded');
    // –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å Signer (wallet) –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    const TokenFactory = await hre.ethers.getContractFactory("CustomToken", wallet);
    const VendingMachineFactory = await hre.ethers.getContractFactory("VendingMachine", wallet);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ gas data
    const feeData = await provider.getFeeData();
    console.log(`‚õΩ Gas price (Max Fee per Gas): ${hre.ethers.formatUnits(feeData.maxFeePerGas, 'gwei')} gwei`);
    
    // --- –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ CustomToken ---
    console.log('\nüìù Deploying CustomToken...');
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (100M tokens)
    const tokenSupply = hre.ethers.parseEther('100000000');// 100M —Ç–æ–∫–µ–Ω–æ–≤ 
    
    // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
    const tokenDeployTx = await TokenFactory.deploy(tokenSupply);
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    await tokenDeployTx.waitForDeployment();
    const tokenAddress = tokenDeployTx.target;
    
    console.log(`‚úÖ CustomToken deployed: ${tokenAddress}`);
    
    // --- –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ VendingMachine ---
    console.log('\nüìù Deploying VendingMachine...');
    
    // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ VendingMachine (–ø–µ—Ä–µ–¥–∞–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞)
    const vendingDeployTx = await VendingMachineFactory.deploy(tokenAddress);
    
    await vendingDeployTx.waitForDeployment();
    const vendingAddress = vendingDeployTx.target;
    
    console.log(`‚úÖ VendingMachine deployed: ${vendingAddress}`);
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏
    const deploymentInfo = {
      network: 'Hardhat Localhost',
      chainId: (await provider.getNetwork()).chainId.toString(),
      rpc: 'http://127.0.0.1:8545',
      customToken: {
        address: tokenAddress,
        symbol: 'HETH',
        decimals: 18,
        totalSupply: '100000000'
      },
      vendingMachine: {
        address: vendingAddress,
        owner: deployerAddress
      },
      deployer: deployerAddress,
      deployedAt: new Date().toISOString()
    };
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º __dirname, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ ESM-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å—Ç–∏–ª–µ
    fs.writeFileSync(
      path.join(__dirname, 'deployment.json'),
      JSON.stringify(deploymentInfo, null, 2)
    );
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ app.js
    console.log('\nüìù Updating app.js...');
    const appJsPath = path.join(__dirname, 'app.js'); 
    let appJs = fs.readFileSync(appJsPath, 'utf8');
    
    appJs = appJs.replace(
      /const contractAddress = ".*?";/,
      `const contractAddress = "${vendingAddress}";`
    );
    
    appJs = appJs.replace(
      /const tokenAddress = ".*?";/,
      `const tokenAddress = "${tokenAddress}";`
    );
    
    fs.writeFileSync(appJsPath, appJs);
    
    console.log('\nüéâ Deployment Complete!');
    console.log('========================');
    console.log(`CustomToken: ${tokenAddress}`);
    console.log(`VendingMachine: ${vendingAddress}`);
    console.log(`Owner: ${deployerAddress}`);
    
    console.log('\nüìã Next Steps:');
    console.log('1. Run your Hardhat DApp frontend.');
    console.log('2. Ensure MetaMask is connected to Localhost (Chain ID 31337).');
    
  } catch (error) {
    console.error('\n‚ùå Deployment failed:', error);
    process.exitCode = 1; 
  }
}

// üí° ESM Execution: –î–ª—è –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ 'npx hardhat run' –º—ã –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é 
// –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è require.main === module.
debugDeploy()
  .catch((error) => {
    console.error(error);
    process.exitCode = 1;
  });

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ 
export { debugDeploy };